
CREATE TABLE "public"."room" ("name" Text NOT NULL, "password" text, PRIMARY KEY ("name") );

CREATE TABLE "public"."user" ("name" text NOT NULL, "password" text, PRIMARY KEY ("name") );

CREATE TABLE "public"."room_user" ("room" text NOT NULL, "user" text NOT NULL, PRIMARY KEY ("room","user") , FOREIGN KEY ("room") REFERENCES "public"."room"("name") ON UPDATE cascade ON DELETE cascade, FOREIGN KEY ("user") REFERENCES "public"."user"("name") ON UPDATE cascade ON DELETE cascade);

alter table "public"."room_user" rename column "room" to "room_name";

alter table "public"."room_user" rename column "user" to "user_name";

alter table "public"."room" add column "created_at" timestamptz
 null default now();

alter table "public"."room" alter column "created_at" set not null;

CREATE OR REPLACE FUNCTION public.room_is_password_protected(room_row room)
 RETURNS boolean
 LANGUAGE sql
 STABLE
AS $function$
  SELECT room_row.password IS NULL AS BOOLEAN
$function$;

alter table "public"."user" add column "created_at" timestamptz
 not null default now();

alter table "public"."room_user" add column "created_at" timestamptz
 not null default now();

CREATE OR REPLACE FUNCTION public.room_is_password_protected(room_row room)
 RETURNS boolean
 LANGUAGE sql
 STABLE
AS $function$
  SELECT room_row.password IS NOT NULL AS BOOLEAN
$function$;

CREATE OR REPLACE FUNCTION public.user_is_password_protected(user_row "user")
 RETURNS boolean
 LANGUAGE sql
 STABLE
AS $function$
  SELECT user_row.password IS NOT NULL AS BOOLEAN
$function$;

CREATE TABLE "public"."room_user_item" ("id" int GENERATED BY DEFAULT AS IDENTITY NOT NULL, "created_at" timestamptz NOT NULL DEFAULT now(), "updated_at" timestamptz NOT NULL DEFAULT now(), "title" text NOT NULL, "subtitle" text NOT NULL, "body" text NOT NULL, "image_url" text, "shop_url" text, "size" text, "priority" text NOT NULL, "room_name" text NOT NULL, "user_name" text NOT NULL, PRIMARY KEY ("id") , FOREIGN KEY ("room_name", "user_name") REFERENCES "public"."room_user"("room_name", "user_name") ON UPDATE cascade ON DELETE cascade, FOREIGN KEY ("room_name") REFERENCES "public"."room"("name") ON UPDATE cascade ON DELETE cascade, FOREIGN KEY ("user_name") REFERENCES "public"."user"("name") ON UPDATE cascade ON DELETE cascade);
CREATE OR REPLACE FUNCTION "public"."set_current_timestamp_updated_at"()
RETURNS TRIGGER AS $$
DECLARE
  _new record;
BEGIN
  _new := NEW;
  _new."updated_at" = NOW();
  RETURN _new;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER "set_public_room_user_item_updated_at"
BEFORE UPDATE ON "public"."room_user_item"
FOR EACH ROW
EXECUTE PROCEDURE "public"."set_current_timestamp_updated_at"();
COMMENT ON TRIGGER "set_public_room_user_item_updated_at" ON "public"."room_user_item" 
IS 'trigger to set value of column "updated_at" to current timestamp on row update';
